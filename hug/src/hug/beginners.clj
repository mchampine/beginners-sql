(ns hug.beginners
  (:require [clojure.java.jdbc :as jdbc]
            [hugsql.core :as hugsql]))

;; query examples based on http://www.sohamkamani.com/blog/2016/07/07/a-beginners-guide-to-sql/
;; See https://www.hugsql.org for HugSQL documentation


;; same for all db layer examples w/ sqlite
(def db
  {:classname   "org.sqlite.JDBC"
   :subprotocol "sqlite"
   :subname     "db/books.db"
   })

;; smoke test the database
(jdbc/query db "SELECT bookid AS id, title FROM books WHERE author='Dan Brown'")
;; expected => ({:id 2, :title "The Lost Symbol"} {:id 4, :title "Inferno"})
;; got      => ({:id 2, :title "The Lost Symbol"} {:id 4, :title "Inferno"})

;; theses calls generate functions based on query data in .sql files
;; Functions generated by def-db-fns execute queries
;; Functions generated by def-sqlvec-fns return an SQL query string

;; file path is relative to <project-root>/src
(hugsql/def-db-fns "hug/beginners.sql")
(hugsql/def-sqlvec-fns "hug/beginners.sql")


;; smoke test with a simple select * from books

;; show the generated query
(all-books-sqlvec)
;; ["select * from books"]

;; do it
(all-books db)
;; ({:bookid 1, :title "Scion of Ikshvaku", :author "Amish Tripathi", :published "06-22-2015", :stock 2} {:bookid 2, :title "The Lost Symbol", :author "Dan Brown", :published "07-22-2010", :stock 3} {:bookid 3, :title "Who Will Cry When You Die?", :author "Robin Sharma", :published "06-15-2006", :stock 4} {:bookid 4, :title "Inferno", :author "Dan Brown", :published "05-05-2014", :stock 3} {:bookid 5, :title "The Fault in our Stars", :author "John Green", :published "01-03-2015", :stock 3})

;; Hard to read, so display as a table
;; utility to print query results a table table
(defn ppt [td] (clojure.pprint/print-table td))
(ppt (all-books db))

;; | :bookid |                     :title |        :author | :published | :stock |
;; |---------+----------------------------+----------------+------------+--------|
;; |       1 |          Scion of Ikshvaku | Amish Tripathi | 06-22-2015 |      2 |
;; |       2 |            The Lost Symbol |      Dan Brown | 07-22-2010 |      3 |
;; |       3 | Who Will Cry When You Die? |   Robin Sharma | 06-15-2006 |      4 |
;; |       4 |                    Inferno |      Dan Brown | 05-05-2014 |      3 |
;; |       5 |     The Fault in our Stars |     John Green | 01-03-2015 |      3 |


;;;;;;;;;;;;;;;;;;;;;;; ok, ready to rumble. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;   BEGINNERS GUIDE to SQL using HugSQL ;;;;;;;;;;;;


;;;;;;;;;;;; 3. Simple Query ;;;;;;;;;;;;

;; All books written by Dan Brown

;; hug in beginners.sql
;; -- :name dan-brown-books :? :*
;; -- :doc Get books written by a given author
;; SELECT bookid AS id, title FROM books WHERE author = :author

;; preview the generated SQL
(books-by-author-sqlvec {:author "Dan Brown"})
;; ["SELECT bookid AS id, title FROM books WHERE author='Dan Brown'"]

;; execute the query
(books-by-author db {:author "Dan Brown"})
;; ({:id 2, :title "The Lost Symbol"} {:id 4, :title "Inferno"})
;; | :id |          :title |
;; |-----+-----------------|
;; |   2 | The Lost Symbol |
;; |   4 |         Inferno |


;;;;;;;;;;;; 4. Joins ;;;;;;;;;;;;


;;;; All borrowed books written by dan brown

;; hug in beginners.sql
;; "SELECT books.title AS title, borrowings.returndate AS ReturnDate
;; FROM borrowings JOIN books ON borrowings.bookid=books.bookid
;; WHERE books.author = :author

(borrowed-books-by-author-sqlvec {:author "Dan Brown"})
;; ["SELECT books.title AS title, borrowings.returndate AS ReturnDate\n  FROM borrowings JOIN books ON borrowings.bookid=books.bookid\n  WHERE books.author = ?" "Dan Brown"]

(borrowed-books-by-author db {:author "Dan Brown"})
;; |          :title | :returndate |
;; |-----------------+-------------|
;; | The Lost Symbol |  03-23-2016 |
;; |         Inferno |  04-13-2016 |
;; | The Lost Symbol |  04-19-2016 |


;; First and last name of everyone who has borrowed a book by dan brown
;; (combines steps 1, 2, and 3)

;; hug in beginners.sql
;; -- :name who-borrowed-an-author :? :*
;; -- :doc Everyone who has borrowed a book by a given author
;; SELECT members.firstname AS FirstName,members.lastname AS LastName
;;   FROM borrowings
;;   JOIN books ON borrowings.bookid=books.bookid
;;   JOIN members ON members.memberid=borrowings.memberid
;;   WHERE books.author = :author

(who-borrowed-an-author-sqlvec {:author "Dan Brown"})
;; ["SELECT members.firstname AS FirstName,members.lastname AS LastName\n  FROM borrowings\n  JOIN books ON borrowings.bookid=books.bookid\n  JOIN members ON members.memberid=borrowings.memberid\n  WHERE books.author = ?" "Dan Brown"]

(who-borrowed-an-author db {:author "Dan Brown"})
;; | :firstname | :lastname |
;; |------------+-----------|
;; |       Mike |    Willis |
;; |      Ellen |    Horton |
;; |      Ellen |    Horton |


;;;;;;;;;;;; 5. Aggregations ;;;;;;;;;;;;

;; Dan brown books borrowed per member (Aggregations)

;; hug in beginners.sql
;; -- :name book-borrowings-by-author :? :*
;; -- :doc how many books where borrowed of a given author
;; SELECT
;; members.firstname AS FirstName,
;; members.lastname AS LastName,
;; count(*) AS Number_of_books_borrowed
;; FROM borrowings
;; JOIN books ON borrowings.bookid=books.bookid
;; JOIN members ON members.memberid=borrowings.memberid
;; WHERE books.author = :author
;; GROUP BY members.firstname, members.lastname

(book-borrowings-by-author-sqlvec {:author "Dan Brown"})
;; ["SELECT\nmembers.firstname AS FirstName,\nmembers.lastname AS LastName,\ncount(*) AS Number_of_books_borrowed\nFROM borrowings\nJOIN books ON borrowings.bookid=books.bookid\nJOIN members ON members.memberid=borrowings.memberid\nWHERE books.author = ?\nGROUP BY members.firstname, members.lastname" "Dan Brown"]

(book-borrowings-by-author db {:author "Dan Brown"})
;; => ({:firstname "Ellen", :lastname "Horton", :number_of_books_borrowed 2}
;; => {:firstname "Mike", :lastname "Willis", :number_of_books_borrowed 1})
;; | :firstname | :lastname | :number_of_books_borrowed |
;; |------------+-----------+---------------------------|
;; |      Ellen |    Horton |                         2 |
;; |       Mike |    Willis |                         1 |


;;;; Total stock of books written by each author

;; hug in beginners.sql
;; -- :name stock-of-books-per-author :? :*
;; -- :doc stock of all books written by each author
;; SELECT author, sum(stock)
;;   FROM books
;;   GROUP BY author

(stock-of-books-per-author-sqlvec)
;; ["SELECT author, sum(stock)\n  FROM books\n  GROUP BY author"]

(stock-of-books-per-author db)
;; => ({:author "Dan Brown", :sum 6} {:author "John Green", :sum 3} {:author "Amish Tripathi", :sum 2} {:author "Robin Sharma", :sum 4})
;; |        :author | :sum |
;; |----------------+------|
;; |      Dan Brown |    6 |
;; |     John Green |    3 |
;; | Amish Tripathi |    2 |
;; |   Robin Sharma |    4 |


;;;;;;;;;;;; 6. Subqueries ;;;;;;;;;;;;

;;;; 6.1 Two-dimensional table

;; Stock of books written by “Robin Sharma”

;; hug in beginners.sql
;; -- :name stock-of-books-by-author  :? :*
;; -- :doc stock of books written by an author
;; SELECT *
;;   FROM (SELECT author, sum(stock)
;;     FROM books
;;     GROUP BY author) AS results
;;   WHERE author = :author

(stock-of-books-by-author-sqlvec {:author "Robin Sharma"})
;; ["SELECT *\n  FROM (SELECT author, sum(stock)\n    FROM books\n    GROUP BY author) AS results\n  WHERE author = ?" "Robin Sharma"]

(stock-of-books-by-author db {:author "Robin Sharma"})
;; ({:author "Robin Sharma", :sum(stock) 4})

;;;; 6.2 One-dimensional array

;; Titles and ids of all books written by an author, whose total stock of books is greater than 3

;;;; First get authors w/ stock > 3

;; hug in beginners.sql
;; -- :name authors-with-stock-gt :? :*
;; -- :doc stock of books written by an author
;; SELECT author
;; FROM (SELECT author, sum(stock) AS ss
;;   FROM books
;;   GROUP BY author) AS results
;; WHERE ss > :ct

(authors-with-stock-gt-sqlvec {:ct 3})
;; ["SELECT author\nFROM (SELECT author, sum(stock) AS ss\n  FROM books\n  GROUP BY author) AS results\nWHERE ss > ?" 3]

(authors-with-stock-gt db {:ct 3})
;; ({:author "Dan Brown"} {:author "Robin Sharma"})


;;;; Then use as subquery

;; hug in beginners.sql
;; -- :name title-stock-authors-stock-gt :?
;; -- :doc stock of books written by an author
;; SELECT title, bookid
;; FROM books
;; WHERE author IN (SELECT author
;;   FROM (SELECT author, sum(stock) AS ss
;;   FROM books
;;   GROUP BY author) AS results
;;   WHERE ss > :ct)

(title-stock-authors-stock-gt-sqlvec {:ct 3})
;; ["SELECT title, bookid\nFROM books\nWHERE author IN (SELECT author\n  FROM (SELECT author, sum(stock) AS ss\n  FROM books\n  GROUP BY author) AS results\n  WHERE ss > ?)" 3]

(title-stock-authors-stock-gt db {:ct 3})
;; ({:title "The Lost Symbol", :bookid 2} {:title "Who Will Cry When You Die?", :bookid 3} {:title "Inferno", :bookid 4})
;; |                     :title | :bookid |
;; |----------------------------+---------|
;; |            The Lost Symbol |       2 |
;; | Who Will Cry When You Die? |       3 |
;; |                    Inferno |       4 |


;;;; Which is equivalent to writing

;;;; Using calculated IN clause
;; hug
;; -- :name title-stock-authors-in :?
;; -- :doc title and stock for authors w stock >3
;; SELECT title, bookid
;; FROM books
;; WHERE author
;; IN (:v*:names)
(def auths (mapv :author (authors-with-stock-gt db {:ct 3})))

(title-stock-authors-in-sqlvec {:names auths})
;; ["SELECT title, bookid\nFROM books\nWHERE author\nIN (?,?)" "Dan Brown" "Robin Sharma"]

(title-stock-authors-in db {:names auths})
;; ({:title "The Lost Symbol", :bookid 2} {:title "Who Will Cry When You Die?", :bookid 3} {:title "Inferno", :bookid 4})
;; |                     :title | :bookid |
;; |----------------------------+---------|
;; |            The Lost Symbol |       2 |
;; | Who Will Cry When You Die? |       3 |
;; |                    Inferno |       4 |


;;;; Using snippet for IN clause
;; hug
;; -- :snip subq-snip
;; SELECT author
;; FROM (SELECT author, sum(stock) AS ss
;;   FROM books
;;   GROUP BY author) AS results
;; WHERE ss > 3
;;
;; -- :name with-subq-in :?
;; -- :doc title and stock for authors w stock >3
;; SELECT title, bookid
;; FROM books
;; WHERE author
;; IN
;; (:snip:where)

(title-stock-authors-subq-in-sqlvec {:where (authors-gt3-snip)})
;; ["SELECT title, bookid\nFROM books\nWHERE author\nIN\n(SELECT author\nFROM (SELECT author, sum(stock) AS ss\n  FROM books\n  GROUP BY author) AS results\nWHERE ss > 3)"]

(title-stock-authors-subq-in db {:where (authors-gt3-snip)})
;; ({:title "The Lost Symbol", :bookid 2} {:title "Who Will Cry When You Die?", :bookid 3} {:title "Inferno", :bookid 4})

;;;; 6.3 Single Values

;; All books having stock above the average stock of books 

;; Average book stock (single values)
(average-book-stock-sqlvec)
;; ["select avg(stock) from books"]

(average-book-stock db)
;; ({:avg(stock) 3.0})

;; Use average in a subquery
;; hug
;; -- :snip avgstk-snip
;; select avg(stock) from books
;;
;; -- :name books-with-above-avg-stock :?
;; -- :doc books with above average stock
;; SELECT * FROM books
;;  WHERE stock>(:snip:where)

(books-with-above-avg-stock-sqlvec {:where (avgstk-snip)})
;; ["SELECT * FROM books\n WHERE stock>(select avg(stock) from books)"]

(books-with-above-avg-stock db {:where (avgstk-snip)})
;; ({:bookid 3, :title "Who Will Cry When You Die?", :author "Robin Sharma", :published "06-15-2006", :stock 4})
;; | :bookid |                     :title |      :author | :published | :stock |
;; |---------+----------------------------+--------------+------------+--------|
;; |       3 | Who Will Cry When You Die? | Robin Sharma | 06-15-2006 |      4 |

;; Which is the same as
(jdbc/query db "SELECT * FROM books WHERE stock>3.000")



;;;;;;;;;;;; 8. Write Operations ;;;;;;;;;;;;

;;;; 7.1 Update

;;;; set stock of an author to zero
;; orig sql (jdbc/update! db :books {:stock 0} ["author='Dan Brown'"])  ;; clojure.jdbc way
;; or       (jdbc/execute! db "UPDATE books SET stock=0 WHERE author='Dan Brown'")

;; hug in beginners.sql
;; -- :name zero-stock-by-author :! :n
;; -- :doc set author books to zero
;; UPDATE books SET stock=0 WHERE author = :author

(zero-stock-by-author-sqlvec {:author "Dan Brown"})
;; ["UPDATE books SET stock=0 WHERE author= ?" "Dan Brown"]

(zero-stock-by-author db {:author "Dan Brown"})
;; 2

;; check it
(stock-of-books-by-author db {:author "Dan Brown"})
;; ({:author "Dan Brown", :sum(stock) 0})


;;;; 7.2 Delete

;; delete books by author
;; orig sql (jdbc/delete! db :books ["author='Dan Brown'"]) ;; clojure.jdbc way
;; or       (jdbc/query db "DELETE from books WHERE author='Dan Brown'")

;; hug in beginners.sql
;; -- :name delete-stock-by-author :!
;; -- :doc delete an author's books
;; DELETE from books WHERE author = :author

(delete-stock-by-author-sqlvec {:author "Dan Brown"})
;; ["DELETE from books WHERE author = ?" "Dan Brown"]

(delete-stock-by-author db {:author "Dan Brown"})
;; (2)

;; check it
(books-by-author db {:author "Dan Brown"})
;; ()

;; restore
(insert-books db
 {:authors
  [[2 "The Lost Symbol" "Dan Brown" "07-22-2010" 3] 
   [4 "Inferno" "Dan Brown" "05-05-2014" 3]]})

;; check it
(books-by-author db {:author "Dan Brown"})
;; ({:id 2, :title "The Lost Symbol"} {:id 4, :title "Inferno"})

;;;; 7.3 Insert

;; restore all books
;; hug in beginners.sql
;; -- :name insert-books :!
;; -- :doc insert books
;; INSERT INTO books
;;   (bookid,title,author,published,stock)
;; VALUES
;;   :tuple*:authors

(insert-books-sqlvec
 {:authors
  [[1 "Scion of Ikshvaku" "Amish Tripathi" "06-22-2015" 2]
   [2 "The Lost Symbol" "Dan Brown" "07-22-2010" 3] 
   [3 "Who Will Cry When You Die?" "Robin Sharma" "06-15-2006" 4] 
   [4 "Inferno" "Dan Brown" "05-05-2014" 3] 
   [5 "The Fault in our Stars" "John Green" "01-03-2015" 3]]})


;; note! Won't actually do the insert of duplicate bookid due to primary key constraint
;; so delete all the books before trying this
(delete-all-books db)  ;; delete all books

(insert-books db
 {:authors
  [[1 "Scion of Ikshvaku" "Amish Tripathi" "06-22-2015" 2]
   [2 "The Lost Symbol" "Dan Brown" "07-22-2010" 3] 
   [3 "Who Will Cry When You Die?" "Robin Sharma" "06-15-2006" 4] 
   [4 "Inferno" "Dan Brown" "05-05-2014" 3] 
   [5 "The Fault in our Stars" "John Green" "01-03-2015" 3]]})

;; check it
(all-books db)
;; | :bookid |                     :title |        :author | :published | :stock |
;; |---------+----------------------------+----------------+------------+--------|
;; |       1 |          Scion of Ikshvaku | Amish Tripathi | 06-22-2015 |      2 |
;; |       2 |            The Lost Symbol |      Dan Brown | 07-22-2010 |      3 |
;; |       3 | Who Will Cry When You Die? |   Robin Sharma | 06-15-2006 |      4 |
;; |       4 |                    Inferno |      Dan Brown | 05-05-2014 |      3 |
;; |       5 |     The Fault in our Stars |     John Green | 01-03-2015 |      3 |

;; end
